t=int(input())
for _ in range(t):
    n,k=list(map(int,input().split()))
    arr=list(map(int,input().split()))
    m=n//k
    r=n%k
    res=[]
    add=[]
    s=0
    for i in range(k):
        end=s+m+(1 if i<r else 0)
        res.append(arr[s:end])
        s=end
    for i in res:
       add.append(sum(i))
    print(max(add))   
        

"""
Split the given array into K sub-arrays such that maximum sum of all sub arrays is minimum

Given an Array[] of N elements and a number K. ( 1 <= K <= N ) . Split the given array into K subarrays (they must cover all the elements). The maximum subarray sum achievable out of K subarrays formed, must be minimum possible. Find that possible subarray sum.

Input format:  First line number of test cases

Second line Two space separated integers N and K.and followed by elements of array.

Constraints:

1≤T≤100

1≤K≤N≤104

1≤Ai ≤105

Sample Input

1

5 3

1 2 3 4 5

Sample output:

6

Explanation: Optimal Split is {1, 2, 3}, {4}, {5}. Maximum sum of all subarrays is 6, which is minimum possible for 3 splits.


For example:

Input
2
4 3
1 2 3 4
5 2
1 2 3 4 5
Result
4
9
"""
